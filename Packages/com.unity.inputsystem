{
  "_id": "com.unity.inputsystem",
  "name": "com.unity.inputsystem",
  "description": "A new input system which can be used as a more extensible and customizable alternative to Unity's classic input system in UnityEngine.Input.",
  "provider": "upm",
  "versions": {
    "1.7.0": {
      "_upm": {
        "changelog": "### Added\n- Preliminary support for visionOS.\n- Show a list of `Derived Bindings` underneath the Binding Path editor to show all controls that matched.\n\n### Changed\n- Changed the `InputAction` constructors so it generates an ID for the action and the optional binding parameter. This is intended to improve the serialization of input actions on behaviors when created through API when the property drawer in the Inspector window does not have a chance to generate an ID.\n\n### Fixed\n- Fixed missing prefab errors in InputDeviceTester project ([case ISXB-420](https://issuetracker.unity3d.com/product/unity/issues/guid/ISXB-420)).\n- Fixed serialization migration in the Tracked Pose Driver component causing bindings to clear when prefabs are used in some cases ([case ISXB-512](https://issuetracker.unity3d.com/product/unity/issues/guid/ISXB-512), [case ISXB-521](https://issuetracker.unity3d.com/product/unity/issues/guid/ISXB-521)).\n- Fixed Tracked Pose Driver to use `Transform.SetLocalPositionAndRotation` when available to improve performance. Based on the user contribution from [DevDunk](https://forum.unity.com/members/devdunk.4432119/) in a [forum post](https://forum.unity.com/threads/more-performant-tracked-pose-driver-solution-included.1462691).\n- Fixed the `Clone` methods of `InputAction` and `InputActionMap` so it copies the Initial State Check flag (`InputAction.wantsInitialStateCheck`) of input actions.\n- Fixed the \"Release tests throws exception in InputSystem\" bug ([case ISXB-581](https://issuetracker.unity3d.com/issues/release-tests-fail-when-input-system-package-is-installed)).\n- Fixed issues with generating Precompiled Layouts for devices which are not defined in a namespace\n- Fixed an issue where some controls like `QuaternionControl` could not be included in a Precompiled Layout because the generated code could not access a setter on child control properties."
      },
      "type": "assets",
      "unity": "2019.4",
      "upmCi": {
        "footprint": "2884559d44178f24851e34d72f68fad583427ed1"
      },
      "samples": [
        {
          "path": "Samples~/CustomComposite",
          "description": "Shows how to implement a custom composite binding.",
          "displayName": "Custom Binding Composite"
        },
        {
          "path": "Samples~/CustomDevice",
          "description": "Shows how to implement a custom input device.",
          "displayName": "Custom Device"
        },
        {
          "path": "Samples~/CustomDeviceUsages",
          "description": "Shows how to tag devices with custom usage strings that can be used, for example, to distinguish multiple instances of the same type of device (e.g. 'Gamepad') based on how the device is used (e.g. 'Player1' vs 'Player2' or 'LeftHand' vs 'RightHand').",
          "displayName": "Custom Device Usages"
        },
        {
          "path": "Samples~/GamepadMouseCursor",
          "description": "An example that shows how to use the gamepad for driving a mouse cursor for use with UIs.",
          "displayName": "Gamepad Mouse Cursor"
        },
        {
          "path": "Samples~/InGameHints",
          "description": "Demonstrates how to create in-game hints in the UI which reflect current bindings and active control schemes.",
          "displayName": "In-Game Hints"
        },
        {
          "path": "Samples~/InputDeviceTester",
          "description": "A scene containing UI to visualize the controls on various supported input devices.",
          "displayName": "InputDeviceTester"
        },
        {
          "path": "Samples~/InputRecorder",
          "description": "Shows how to capture and replay input events. Also useful by itself to debug input event sequences.",
          "displayName": "Input Recorder"
        },
        {
          "path": "Samples~/OnScreenControls",
          "description": "Demonstrates a simple setup for an on-screen joystick.",
          "displayName": "On-Screen Controls"
        },
        {
          "path": "Samples~/RebindingUI",
          "description": "An example UI component that demonstrates how to create UI for rebinding actions.",
          "displayName": "Rebinding UI"
        },
        {
          "path": "Samples~/SimpleDemo",
          "description": "A walkthrough of a simple character controller that demonstrates several techniques for working with the input system. See the README.md file in the sample for details.",
          "displayName": "Simple Demo"
        },
        {
          "path": "Samples~/SimpleMultiplayer",
          "description": "Demonstrates how to set up a simple local multiplayer scenario.",
          "displayName": "Simple Multiplayer"
        },
        {
          "path": "Samples~/TouchSamples",
          "description": "A series of sample scenes for using touch input with the Input System package. This sample is not actually part of the package, but needs to be downloaded.",
          "displayName": "Touch Samples"
        },
        {
          "path": "Samples~/UIvsGameInput",
          "description": "An example that shows how to deal with ambiguities that may arrise when overlaying interactive UI elements on top of a game scene.",
          "displayName": "UI vs. Game Input"
        },
        {
          "path": "Samples~/UnityRemote",
          "description": "An example with a simple scene for trying out the Unity Remote app.",
          "displayName": "Unity Remote"
        },
        {
          "path": "Samples~/Visualizers",
          "description": "Several example visualizations of input controls/devices and input actions.",
          "displayName": "Visualizers"
        }
      ],
      "repository": {
        "url": "https://github.com/Unity-Technologies/InputSystem.git",
        "type": "git",
        "revision": "e29989176f3a8473ba30854e4bfae953083eba28"
      },
      "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.inputsystem@1.7/manual/index.html",
      "name": "com.unity.inputsystem",
      "version": "1.7.0",
      "displayName": "Input System",
      "description": "A new input system which can be used as a more extensible and customizable alternative to Unity's classic input system in UnityEngine.Input.",
      "keywords": [
        "input",
        "events",
        "keyboard",
        "mouse",
        "gamepad",
        "touch",
        "vr",
        "xr"
      ],
      "dependencies": {
        "com.unity.modules.uielements": "1.0.0"
      },
      "dist": {
        "shasum": "a74895ba94362b3b9255c9cc3828ee44c4eafcc3",
        "tarball": "https://unity-stevedore.s3.us-east-1.amazonaws.com/com.unity.inputsystem-1.7.0.tgz"
      }
    }
  },
  "time": {
    "1.7.0": "2024-11-19T04:06:19Z"
  },
  "dist-tags": {
    "latest": "1.7.0"
  },
  "etag": "\"30eb5-TXTZ0+ibApyn5YS0x8pGIeyeg1U\""
}